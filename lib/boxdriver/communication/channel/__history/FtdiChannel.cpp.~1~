//---------------------------------------------------------------------------

#pragma hdrstop

#include <windows.h>
#include "util.h"
#include "TCHAR.h"
#include "FtdiChannel.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)

FtdiChannel::FtdiChannel(){
}

void FtdiChannel::init(int connStringType,char* connString)
{
    strcpy(this->connString,connString);
	baud = 115200;
}

void FtdiChannel::openDevice()
{
	hCom = CreateFile(this->connString,
		GENERIC_READ|GENERIC_WRITE,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL|FILE_FLAG_OVERLAPPED,//,0
		NULL);
	if(hCom ==INVALID_HANDLE_VALUE)
	{
		WriteLog("打开COM失败!");
		return;
	}
	WriteLog("打开COM成功!");
	if (!SetupComm(hCom,2048,2048))return;
    COMMTIMEOUTS TimeOuts;
    TimeOuts.ReadIntervalTimeout=MAXDWORD;
    TimeOuts.ReadTotalTimeoutMultiplier = 0;
    TimeOuts.ReadTotalTimeoutConstant = 0;
    TimeOuts.WriteTotalTimeoutMultiplier = 0;
    TimeOuts.WriteTotalTimeoutConstant = 500;
    SetCommTimeouts(hCom,&TimeOuts);
    DCB dcb;
	memset(&dcb,0,sizeof(dcb));
    GetCommState(hCom,&dcb);
    dcb.BaudRate=baud;
    dcb.ByteSize=8;
    dcb.Parity=NOPARITY;
    dcb.StopBits=ONESTOPBIT;
    SetCommState(hCom,&dcb);
    PurgeComm(hCom,PURGE_TXCLEAR|PURGE_RXCLEAR);
	WriteLog("完成配置COM!");
}

bool FtdiChannel::isDeviceOpened()
{
	bool ret = false;
	HANDLE hComTest = CreateFile(this->connString,
		GENERIC_READ|GENERIC_WRITE,
		0,
		NULL,
		OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL|FILE_FLAG_OVERLAPPED,
		NULL);
	if(hComTest == INVALID_HANDLE_VALUE)
	{
		ret = true;
	}
	CloseHandle(hComTest);
	return  ret;
}

void FtdiChannel::closeDevice()
{
	if (hCom != INVALID_HANDLE_VALUE)
	{
		WriteLog("关闭COM!");
		CloseHandle(hCom);
	}
}

int FtdiChannel::read(RingBytesBuffer* buffer)
{
	if(hCom ==INVALID_HANDLE_VALUE)
	{
		return -1;
	}
	OVERLAPPED m_osRead;
	memset(&m_osRead,0,sizeof(OVERLAPPED));
	m_osRead.hEvent=CreateEvent(NULL,TRUE,FALSE,NULL);
	COMSTAT ComStat;
	DWORD dwErrorFlags;
	BYTE str[1024];
	DWORD dwBytesRead=1024;
	BOOL bReadStat;
	ClearCommError(hCom,&dwErrorFlags,&ComStat);
	dwBytesRead=min(dwBytesRead, (DWORD)ComStat.cbInQue);
	if (dwBytesRead <= 0) return 0;
	bReadStat=ReadFile(hCom,str,dwBytesRead,&dwBytesRead,&m_osRead);
	if(!bReadStat)
	{
		if(GetLastError()==ERROR_IO_PENDING)
		{
			WaitForSingleObject(m_osRead.hEvent,1000);
			PurgeComm(hCom, PURGE_TXABORT|PURGE_RXABORT|PURGE_TXCLEAR|PURGE_RXCLEAR);
        	return dwBytesRead;
		}
        return 0;
	}
	buffer->push(str, 0, dwBytesRead);
	return dwBytesRead;
}

int FtdiChannel::write(Array<BYTE> data)
{
	OVERLAPPED m_osWrite;
	memset(&m_osWrite,0,sizeof(OVERLAPPED));
	m_osWrite.hEvent=CreateEvent(NULL,TRUE,FALSE,NULL);
	DWORD dwBytesWrite= data.GetSize();
	COMSTAT ComStat;
	DWORD dwErrorFlags;
	BOOL bWriteStat;
	if(hCom ==INVALID_HANDLE_VALUE)
	{
		return 0;
	}
	ClearCommError(hCom,&dwErrorFlags,&ComStat);
	bWriteStat=WriteFile(hCom,data.GetPt(),dwBytesWrite,&dwBytesWrite,&m_osWrite);
	if(!bWriteStat)
	{
		if(GetLastError()==ERROR_IO_PENDING)
		{
			WaitForSingleObject(m_osWrite.hEvent,100);
			return dwBytesWrite;
		}
        return 0;
	}
	//WriteLog("wt %d",GetTickCount());
	return dwBytesWrite;
}

