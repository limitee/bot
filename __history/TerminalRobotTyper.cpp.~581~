//---------------------------------------------------------------------------
#pragma hdrstop

#include "TerminalRobotTyper.h"

#include "Terminal.h"
#include "TerminalPanel.h"
#include "TerminalCategory.h"
#include "TerminalConfig.h"
#include "TerminalConnection.h"
#include "TerminalBox.h"
#include "TerminalDaemon.h"

#include "MediaSupport.h"
#include "Controller.h"
#include "TicketCenterNodeApp.h"
#include "FileDataDealer.h"

#include <inifiles.hpp>
//---------------------------------------------------------------------------
#pragma package(smart_init)

//---------------------------------------------------------------------------
__fastcall CTerminalRobotTyper::CTerminalRobotTyper(CTerminal *term, bool CreateSuspended): TThread(CreateSuspended){
	terminal =term;
    keyIntervalRestored =false;
}

//---------------------------------------------------------------------------
void __fastcall CTerminalRobotTyper::Execute(){
	while (! Terminated){
		//各类请求的按键流程
        SendKeys();
		//在这直接把本线程挂起，等待接收数据的任务唤醒通知
		this->Suspended =true;
		Sleep(20);	//延时避免线程访问资源冲突，可能是唤醒函数返回时容易资源冲突，或是也是为切纸指令后的几个字节留出时间
		//处理票根
		HandleStub();
		//终端复位，显示重置
		terminal->ResetTerminalContext();
		Synchronize(& terminal->panel->ResetPanelRequestEcho);   //提升到主线程去，防止多线程争抢资源冲突
		//挂起，等下次
		Suspended =true;
		Sleep(50);
	}
}

//---------------------------------------------------------------------------
bool CTerminalRobotTyper::SetCurrentRequest(Request *request){
	if (terminal->status !=WorkStatus::IDLE) return false;
	terminal->currentRequest =request;
	if (request->reqType ==RequestTypeEnum::TICKET) {
		terminal->status =WorkStatus::PRINT;
	}else if (request->reqType ==RequestTypeEnum::BONUS) {
		terminal->status =WorkStatus::AWARD;
	}else if (request->reqType ==RequestTypeEnum::QUERY) {
		terminal->status =WorkStatus::REPORT;
	}
	Synchronize(& terminal->panel->RequestChangePanelUI);
	Suspended =false;
	return true;
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::SendKeys(){
    int keysCount =0;
	if (terminal->status ==WorkStatus::PRINT) keysCount =SendTicketKeys();
	else if (terminal->status ==WorkStatus::AWARD) keysCount =SendBonusKeys();
	else if (terminal->status ==WorkStatus::REPORT) keysCount =SendQueryKeys();
	//等待BOX下发键盘的完成
	long delay =keysCount *8 *(terminal->panel->TrackBarKey->Min +terminal->panel->TrackBarKey->Max -terminal->panel->TrackBarKey->Position);
    Sleep(delay);       //等待按键完成
	//设置时间戳，判断最大出票时间的超时参数
	terminal->daemon->suspendTimestamp =GetTickCount();
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::HandleStub(){
	//由于网络或终端等错误状态，造成线程死等待，需要状态重置，不处理后半程
	if (terminal->needReset) return;
	if (terminal->status ==WorkStatus::PRINT) HandleTicketStub();
	else if (terminal->status ==WorkStatus::AWARD) HandleBonusStub();
	else if (terminal->status ==WorkStatus::REPORT) HandleQueryStub();
    //第一张订单正常处理后，重置按键间隔参数
	if (! keyIntervalRestored) Synchronize(&RestoreKeyInterval);
	//声音OK
	if (terminal->panel->CheckBoxSound->Checked) controller->mediaSupport->SoundOK();
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::Notify(){
	Suspended =false;
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::Stop(){
    this->Terminate();
}

//---------------------------------------------------------------------------
int CTerminalRobotTyper::SendTicketKeys(){
    int keysCount =0;
	//把当前待出票放入列表第一行
    Ticket *currentTicket =(Ticket *)terminal->currentRequest;
	AnsiString id =IntToStr(currentTicket->id);
	AnsiString tickstr =currentTicket->number;
	int times =currentTicket->multiple;
	AnsiString gameAdapter =currentTicket->playType +"-" +currentTicket->betType; 	//与其他层次关系不同，不用：而用-
	AnsiString echoName =terminal->GetStakeNameById(currentTicket->gameId, gameAdapter);
	if (echoName ==""){     //终端与游戏的配置问题
		terminal->daemon->suspendTimestamp =GetTickCount();
		controller->AddErrorMessage("终端" +terminal->xmlConfig->TerminalID +"不支持此类游戏出票，请检查配置文件！稍后终端会自动复位。");
        return 0;
	}
	//设置并刷新终端监控信息
    TStringList *line =new TStringList();
	line->Add(id);
	line->Add(tickstr);
	line->Add(IntToStr(times));
	line->Add(gameAdapter);
	line->Add(echoName);
	line->Add(IntToStr(currentTicket->icount));
	line->Add(IntToStr(currentTicket->amount));
    terminal->panel->topLineContent =line;
    terminal->panel->FillTopLineContent);
    delete line;
	//查找当前票节点
	terminal->currentStake =terminal->findStakeById(currentTicket->gameId, gameAdapter);
	//按照规则，重试出票请求会发给同一台终端，如果本地有文件，直接返回文件票根
	AnsiString binFile =controller->config->BinFileDir +"ticket\\" +id +".bin";
	if (FileExists(binFile)){
		LoadStubFromFile(binFile);
		return 0;		//直接返回，不用等待按键时间，但需要等待出票超时被处理
	}
	//计算两个不同类型的彩票，中间界面跳转需要的按键，并打印跳转
	AnsiString jumpStr =terminal->getJumpInnerCodeString(terminal->lastStake, terminal->currentStake);
	keysCount +=terminal->box->TypeInnerString(jumpStr +"~");
	//调用动态库函数，生成打印号码的按键序列，不包括最后的确认！
	char keys[256] ={0};
	terminal->GeneralTicketKeyStr((currentTicket->gameId +"-" +gameAdapter), tickstr, times, keys);
	keysCount +=terminal->box->TypeInnerString(AnsiString(keys));
	//超出单票的最大金额的提示确认，可能未设置
	if (terminal->xmlConfig->LotteryPos->HasAttribute("NeedConfirmAmount")) {
		if (currentTicket->amount >=terminal->xmlConfig->LotteryPos->NeedConfirmAmount && currentTicket->amount < terminal->xmlConfig->LotteryPos->NeedPasswordAmount) {
			keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirm);  //一般为200，再次确认
		}else if (currentTicket->amount >=terminal->xmlConfig->LotteryPos->NeedPasswordAmount) {
			keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirm);
			keysCount +=terminal->box->TypeInnerString("~~~~~~");            //密码界面较慢
			keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->LotteryPos->SalesPassword);         //金额超出500输入密码确认出票
		}
	}
	//确认出票键
	keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirm);
	return keysCount;
}

//---------------------------------------------------------------------------
int CTerminalRobotTyper::SendBonusKeys(){
	int keysCount =0;
	//把当前待出票放入列表第一行
	Bonus *currentBonus =(Bonus *)terminal->currentRequest;
	terminal->panel->TicketGrid->Cells[1][1] =IntToStr(currentBonus->id);
	terminal->panel->TicketGrid->Cells[2][1] =currentBonus->seq;
	terminal->panel->TicketGrid->Cells[3][1] =FloatToStr(currentBonus->bonus/100);
	terminal->panel->EchoOrderString(1);
//	//按照规则，重试出票请求会发给同一台终端，如果本地有文件，直接返回文件票根
//	AnsiString binFile =controller->config->BinFileDir +"bonus\\" +IntToStr(currentBonus->id) +".bin";
//	if (FileExists(binFile)){
//	    LoadStubFromFile(binFile);
//		return 0;
//	}
	//发送序列码按键
	keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->BobusPrefix);		//兑奖按键前缀
	//调用动态库函数，生成打印号码的按键序列，不包括最后的确认！
	char keys[256] ={0};
	terminal->GeneralBonusKeyStr(currentBonus->seq, keys);
	keysCount +=terminal->box->TypeInnerString(AnsiString(keys));
	keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->BobusPostfix);	//兑奖按键后缀，体彩是F1打印兑奖回执
	return keysCount;
}

//---------------------------------------------------------------------------
int CTerminalRobotTyper::SendQueryKeys(){
	int keysCount =0;
	//构造出查询ID，在报表中查找对应的按键
	Query *query =(Query *)terminal->currentRequest;
	AnsiString queryId =query->queryCmdType;                                        //构造查询ID: 命令字-参数-参数……
	if (query->queryCmdType ==CMD_QUERY_TERM){      		//查奖期
		queryId +="-" +query->gameId +"-" +IntToStr(query->type);
	}else if (query->queryCmdType ==CMD_QUERY_RECEIPT){    	//查缴款
		queryId +="-" +IntToStr(query->type);
	}
	int index =0;
	for (; index <terminal->xmlConfig->CategoryReport->Count; index++) {
		if (terminal->xmlConfig->CategoryReport->Get_ReportMenu(index)->HasAttribute("QueryID")
			&& terminal->xmlConfig->CategoryReport->Get_ReportMenu(index)->QueryID ==queryId) break;
	}
	if (index ==terminal->xmlConfig->CategoryReport->Count){
		controller->AddErrorMessage("终端" +terminal->xmlConfig->TerminalID +"后台请求的查询ID错误：" +queryId +"，请检查配置或终端机报表。");
		return 0;
	}
	_di_IXMLReportMenuType menu =terminal->xmlConfig->CategoryReport->Get_ReportMenu(index);
	//发送序列码按键
	keysCount +=terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->DefaultBackRoot);
	keysCount +=terminal->box->TypeInnerString(menu->InnerKeys);
	return keysCount;
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::HandleTicketStub(){
	//向服务器后台提交修改本张票的打印状态，非本地文件出票，上传后台
	Ticket *currentTicket =(Ticket *)terminal->currentRequest;
	if (currentTicket->fileData){
		//发票任务需要等待一会，等终端机复位或者界面切换，也就是下边的代码执行完
		controller->fileDataDealer->NotifyPrint(terminal);
	}else{
		bool success =terminal->connection->ReplyStub(terminal->currentStub);
		if (!success) {
			controller->AddErrorMessage("终端" +terminal->xmlConfig->TerminalID +"已正常出票，但向后台提交票根时网络错误，票号：" +IntToStr(currentTicket->id) +"，请注意出票是否正常。");
			terminal->connection->DisConnect();     //等待下次重新发过来，从票根文件中上传吧
		}
	}
	//统计数据更新，包括在线的和本地的
	terminal->monitor->ticketCount ++;
	terminal->monitor->ticketMoney +=currentTicket->amount;
	//切换当前与上一注记录
	terminal->lastStake =terminal->currentStake;	//默认切换
	//看打印完后的界面，是否自动转到另一投注方式的起始位置，如果是的话就自动转过去
	if (terminal->currentStake->HasAttribute("FinishedNode") && terminal->currentStake->FinishedNode!="") {
		terminal->lastStake =terminal->findStakeByNode(terminal->currentStake->FinishedNode);
	}
	//往下挪一行
	Synchronize(& terminal->panel->GridInsertNewDataLine);
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::HandleBonusStub(){
	Bonus *bonus =(Bonus *)terminal->currentRequest;
	//上传后台兑奖回执单
	if (!terminal->connection->ReplyStub(terminal->currentStub)){
		controller->AddErrorMessage("终端" +terminal->xmlConfig->TerminalID +"已正常兑奖但回执单未成功上传，票号：" +IntToStr(bonus->id) +"，请注意兑奖是否正常。");
		terminal->connection->DisConnect();     //等待下次重新发过来，从票根文件中上传吧
	}
	//修改监控累计数据
	terminal->monitor->prizeCount ++;
	terminal->monitor->prizeMoney +=bonus->bonus;
	//往下挪一行
	Synchronize(& terminal->panel->GridInsertNewDataLine);
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::HandleQueryStub(){
	//上传查询结果，并转回主目录
	terminal->connection->ReplyStub(terminal->currentStub);
	terminal->box->TypeInnerString(terminal->xmlConfig->CategoryReport->FinishKeys);
}

//---------------------------------------------------------------------------
void __fastcall CTerminalRobotTyper::RestoreKeyInterval(){
   	TIniFile *ini = new TIniFile(GetCurrentDir() + "\\app.ini");
	int keyInterval = ini->ReadInteger(terminal->xmlConfig->TerminalID , "KeyboardInterval", terminal->panel->TrackBarKey->Position);
    delete ini;
	terminal->panel->TrackBarKey->Position =keyInterval;
    keyIntervalRestored =true;
}

//---------------------------------------------------------------------------
void CTerminalRobotTyper::LoadStubFromFile(AnsiString file){
	int hBinFile = FileOpen(file, fmOpenRead);
	char bin[16384] ={0};
	int nRead =FileRead(hBinFile, bin, sizeof(bin));
	//解密文件
	controller->Decrypt(bin, nRead, terminal->box->stubBuffer);
	terminal->box->stubDataLength =nRead +1;
	FileClose(hBinFile);
	//给监控线程设置信号，已准备好
	terminal->daemon->stubFromFileReady =true;
}


