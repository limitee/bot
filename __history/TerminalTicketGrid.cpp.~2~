//---------------------------------------------------------------------------

#pragma hdrstop

#include "TerminalTicketGrid.h"
#include "Terminal.h"
#include "TerminalMonitorPanel.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


//---------------------------------------------------------------------------
__fastcall CTicketGrid::CTicketGrid(TComponent* Owner, CTerminal *term, bool cnt) : TStringGrid(Owner)
{
	terminal =term;
	count =cnt;
	//
	ColCount =8;
	RowCount =51;				//固定50行数据，处理时少几次循环
	FixedRows =1;
	FixedCols =1;
	DefaultRowHeight =18;
	BevelInner =bvRaised;
	BevelOuter =bvLowered;
	ScrollBars =ssVertical;
	Options >> goRangeSelect;	//屏蔽区域多选，>>  或者 <<  就是选择和屏蔽
	Cursor =crHandPoint;        //默认手型光标
	//
	SetTicketMode();			//默认出票模式
	Cells[0][0]="―";
	for (int i = 1; i < RowCount; i++) {
		Cells[0][i]= IntToStr(i);
	}
	Cells[4][0]="彩种";			//仅显示用，5+6计算出来的
	Cells[5][0]="玩法ID";
	Cells[6][0]="长度";
	Cells[7][0]="来源";			//0线下单，1线上单
	//宽度
	ColWidths[0] =32;
	ColWidths[1] =99;
	//ColWidths[2] =194;		//投注号码列的长度可变
	ColWidths[3] =41;
	ColWidths[4] =0;
	ColWidths[5] =0;
	ColWidths[6] =0;
	ColWidths[7] =0;
}

//---------------------------------------------------------------------------
void CTicketGrid::SetTicketMode(){
	Cells[1][0]="流水号";
	Cells[2][0]="投注号码串";
	Cells[3][0]="倍";
}

//---------------------------------------------------------------------------
void CTicketGrid::SetPrizeMode(){
	Cells[1][0]="票号";
	Cells[2][0]="中奖票面明文";
	Cells[3][0]="奖金";
}

//---------------------------------------------------------------------------
void CTicketGrid::InsertBlankRow(int row){
	for (int i =0; i <ColCount; i++) Cells[i][RowCount-1] ="";		//先把队尾那行清空，然后挪到指定行，骗人的技巧，呵呵
	MoveRow(RowCount-1, row);
	this->Row =row;
	if (count) terminal->monitor->pendingCount ++;                  //只对排队的有效行计数，完成的无效
	for (int i =row; i < RowCount; i++) Cells[0][i]= IntToStr(i);   //首列序号从本行往下重排
}

//---------------------------------------------------------------------------
void CTicketGrid::DeleteTicket(int row){
	for (int i =0; i <ColCount; i++) Cells[i][row] ="";           	//先清空，免得有问题，删不掉重复打印
	MoveRow(row, RowCount-1);										//直接把指定行挪到队尾，然后把队尾这行数值清空删除之
	for (int i =0; i <ColCount; i++) Cells[i][RowCount-1] ="";
	this->Row =row;
	if (count) terminal->monitor->pendingCount --;                             //
	for (int i =row; i < RowCount; i++) Cells[0][i]= IntToStr(i);	//首列序号从本行往下重排
}

