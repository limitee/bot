//---------------------------------------------------------------------------
#pragma hdrstop

#include "TerminalTicketRobot.h"

#include "Terminal.h"
#include "TerminalPanel.h"
#include "TerminalCategory.h"
#include "TerminalConfig.h"
#include "TerminalConnection.h"
#include "TerminalBox.h"

#include "MediaSupport.h"
#include "Controller.h"
#include "TicketCenterNodeApp.h"
#include "FileDataDealer.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)

//---------------------------------------------------------------------------
__fastcall CTerminalTicketRobot::CTerminalTicketRobot(CTerminal *term, bool CreateSuspended): TThread(CreateSuspended){
	terminal =term;
}

//---------------------------------------------------------------------------
void __fastcall CTerminalTicketRobot::Execute(){
	Sleep(5000);
	while (! Terminated){
		//出票按键
		SendTicketKeys();
		//在这直接把本线程挂起，等待接收数据的任务唤醒通知，并且验证票面金额的结果也进来了
		this->Suspended =true;
		Sleep(20);	//这加上一点延时，避免线程访问资源冲突，可能是唤醒函数返回时容易资源冲突，或是也是为切纸指令后的几个字节留出时间，反正这有点延时就解决了
		//处理票根
		HandleStub();
		//终端复位
		terminal->ResetTerminalContext();
        //挂起，等下次
		Suspended =true;
		Sleep(50);

//		//16秒一张，暂停等一下
//        Sleep(16000);
	}
}

//---------------------------------------------------------------------------
bool CTerminalTicketRobot::SetCurrentTicket(Ticket tick){
	if (terminal->status !=WorkStatus::IDLE) return false;
	terminal->panel->BitBtnPrint->Caption ="出票中……";
	terminal->panel->BitBtnPrint->Enabled =false;	//暂时让终止按键失效
	terminal->panel->TicketGrid->SetTicketMode();   //表头，出票模式
	currentTicket =tick;
	terminal->status =WorkStatus::PRINT;
	terminal->needReset =false;                     //重设不能复位
	Suspended =false;

	return true;
}

//---------------------------------------------------------------------------
void CTerminalTicketRobot::NotifyStub(int money, AnsiString stub){
    terminal->currentStub.ticket =currentTicket;
    terminal->currentStub.status =1;
	terminal->currentStub.money =money;
	terminal->currentStub.stub =stub;
	Suspended =false;
}

//---------------------------------------------------------------------------
void CTerminalTicketRobot::SendTicketKeys(){
	//把当前待出票放入列表第一行
	AnsiString id =IntToStr(currentTicket.id);
	AnsiString tickstr =currentTicket.number;
	int times =currentTicket.multiple;
	AnsiString gameAdapter =currentTicket.playType +"-" +currentTicket.betType; 	//与其他层次关系不同，不用：而用-
	AnsiString echoName =terminal->GetStakeNameById(currentTicket.gameId, gameAdapter);
	if (echoName ==""){     //终端与游戏的配置问题
		terminal->SuspendTimestamp =GetTickCount();
		ShowMessage("终端" +terminal->xmlConfig->TerminalID +"不支持此类游戏出票，请检查配置文件！稍后终端会自动复位。");
        return;
	}
	terminal->panel->TicketGrid->Cells[1][1] =id;
	terminal->panel->TicketGrid->Cells[2][1] =tickstr;
	terminal->panel->TicketGrid->Cells[3][1] =IntToStr(times);
	terminal->panel->TicketGrid->Cells[4][1] =gameAdapter;
	terminal->panel->TicketGrid->Cells[5][1] =echoName;
	terminal->panel->TicketGrid->Cells[6][1] =IntToStr(currentTicket.icount);
	terminal->panel->TicketGrid->Cells[7][1] =IntToStr(currentTicket.amount);
	//查找当前票节点，刷新终端监控信息
	terminal->currentStake =terminal->findStakeById(currentTicket.gameId, gameAdapter);
	terminal->panel->EchoStakeString(1);
	//计算两个不同类型的彩票，中间界面跳转需要的按键，并打印跳转
	AnsiString jumpStr =terminal->getJumpInnerCodeString(terminal->lastStake, terminal->currentStake);
	terminal->box->TypeInnerString(jumpStr);
	//调用动态库函数，生成打印号码的按键序列，不包括最后的确认！
	char keys[256] ={0};
	terminal->GeneralTicketKeyStr((currentTicket.gameId +"-" +gameAdapter), tickstr, times, keys);
	terminal->box->TypeInnerString(AnsiString(keys));
	//确认出票键
	terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirmInnerKey);
	//超出单票的最大金额的提示确认，可能未设置
	if (terminal->xmlConfig->HasAttribute("NeedConfirmAmount")) {
		if (currentTicket.amount >=terminal->xmlConfig->NeedConfirmAmount && currentTicket.amount < terminal->xmlConfig->NeedPasswordAmount) {
			terminal->box->TypeInnerString("~~~");
			terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirmInnerKey);  //一般为200，再次确认
		}else if (currentTicket.amount >=terminal->xmlConfig->NeedPasswordAmount) {
			terminal->box->TypeInnerString(terminal->xmlConfig->SalesPassword);         //金额超出500输入密码确认出票
			terminal->box->TypeInnerString(terminal->xmlConfig->Keyboard->PrintConfirmInnerKey);
		}
	}
	//设置时间戳，判断最大出票时间的超时参数
	terminal->SuspendTimestamp =GetTickCount();
}

//---------------------------------------------------------------------------
void CTerminalTicketRobot::HandleStub(){
	//由于网络或终端等错误状态，造成线程死等待，需要状态重置，不处理后半程
	if (terminal->needReset){
        Sleep(100);
		return;
	}
	//向服务器后台提交修改本张票的打印状态，非本地文件出票，上传后台
	if (currentTicket.fileData){
	    //发票任务需要等待一会，等终端机复位或者界面切换，也就是下边的代码执行完
		MainForm->controller->fileDataDealer->NotifyPrint(terminal);
	}else{
		bool success =terminal->connection->ReplyStub(terminal->currentStub, false);
		if (!success) {
			//加HTTP的POST方式，修改后台异常票，自动上传票根，如果再错，必须人工干预了
			if (! terminal->connection->HttpUpdateStub(terminal->currentStub)){
				terminal->errMsg ="本张彩票已正常出票，但向后台提交票根时网络错误，票号：" +IntToStr(currentTicket.id);
				return;
			}
		}
	}
	//统计数据更新，包括在线的和本地的
	terminal->monitor->ticketCount ++;
	terminal->monitor->ticketMoney +=currentTicket.amount;
	//切换当前与上一注记录
	terminal->lastStake =terminal->currentStake;	//默认切换
    //看打印完后的界面，是否自动转到另一投注方式的起始位置，如果是的话就自动转过去
	if (terminal->currentStake->HasAttribute("FinishedNode") && terminal->currentStake->FinishedNode!="") {
		terminal->lastStake =terminal->findStakeByNode(terminal->currentStake->FinishedNode);
	}
	//刚打印完的这张放到右边,完成列表顶部第一行,待打的彩票，往上挪
	terminal->panel->TicketGrid->InsertBlankRow(2);
	for (int i = 1; i <= 7; i++) terminal->panel->TicketGrid->Cells[i][2] =terminal->panel->TicketGrid->Cells[i][1];
	//声音OK
	if (terminal->panel->CheckBoxSound->Checked) {
		MainForm->controller->mediaSupport->SoundOK();
	}
}

